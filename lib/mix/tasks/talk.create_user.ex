defmodule Mix.Tasks.Talk.CreateUser do
  @moduledoc """
  Creates a user.
  """

  @shortdoc "Creates a user."

  use Mix.Task
  import Mix, only: [shell: 0]

  alias Talk.Users
  alias TalkWeb.Auth

  @switches [
    id: :string,
    email: :string,
    username: :string,
    display_name: :string,
    profile_id: :string,
    avatar: :string
  ]

  @doc false
  def run(args) do
    Mix.Task.run("app.start")

    args
    |> parse_opts()
    |> do_run()
  end

  defp do_run(opts) do
    {_, attrs} =
      {opts, %{}}
      |> put_id()
      |> get_email()
      |> put_avatar()
      |> get_username()
      |> put_profile_id()
      |> put_display_name()

    {:ok, user} =
      attrs
      |> create_user()

    token =
      user
      |> get_token()

    shell().info("User created successfully.")
    shell().info("Token: #{token}")
  end

  defp get_email({opts, _attrs} = tuple) do
    email =
      case Keyword.get(opts, :email) do
        nil ->
          "Email [leave blank for an autogenerated]:"
          |> shell().prompt()
          |> String.trim()
          |> case do
            "" -> Faker.Internet.email
            username -> username
          end

        email ->
          email
      end

    put_email(tuple, email)
  end

  defp get_username({opts, _attrs} = tuple) do
    username =
      case Keyword.get(opts, :username) do
        nil ->
          "Username [leave blank for an autogenerated]:"
          |> shell().prompt()
          |> String.trim()
          |> case do
            "" -> Faker.Internet.user_name
            username -> username
          end

        username ->
          username
      end

    put_username(tuple, username)
  end

  defp put_id(tuple), do: put_attr(:id).(tuple, gen_id())
  defp put_email(tuple, email), do: put_attr(:email).(tuple, email)
  defp put_avatar(tuple), do: put_attr(:avatar).(tuple, Faker.Avatar.image_url)
  defp put_username(tuple, username), do: put_attr(:username).(tuple, username)
  defp put_profile_id(tuple), do: put_attr(:profile_id).(tuple, gen_id())
  defp put_display_name({_opts, attrs} = tuple) do
    display_name = Map.get(attrs, :username)
    put_attr(:display_name).(tuple, display_name)
  end

  defp put_attr(key), do: fn {opts, attrs}, value -> {opts, Map.put(attrs, key, value)} end

  defp gen_id do
    length = 33

    :crypto.strong_rand_bytes(length)
    |> Base.encode64
    |> binary_part(0, length)
  end

  defp parse_opts(args) do
    {opts, _, _} = OptionParser.parse(args, switches: @switches)

    opts
  end

  defp create_user(attrs), do: Users.create_user(attrs)

  defp get_token(user) do
    {:ok, token} = Auth.generate_token(user)

    token
  end
end
